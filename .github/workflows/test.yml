# This workflow will run tests for SimTradeLab on multiple Python versions

name: Test SimTradeLab

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # 允许手动触发
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        # 可选：排除某些组合以节省资源
        exclude:
          - os: windows-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.12"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run basic import test
        run: |
          poetry run python -c "import simtradelab; print(f'✅ SimTradeLab {simtradelab.__version__} imported successfully')"

      - name: Run unit tests
        run: |
          poetry run pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        run: |
          poetry run pytest tests/integration/ -v --tb=short

      - name: Test CLI functionality
        run: |
          poetry run simtradelab --help

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          poetry run pytest tests/ --cov=simtradelab --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Check code formatting (optional)
        continue-on-error: true
        run: |
          # 如果使用black格式化
          # poetry run black --check src/simtradelab/
          echo "Code formatting check (optional)"

      - name: Run type checking (optional)
        continue-on-error: true
        run: |
          # 如果使用mypy类型检查
          # poetry run mypy src/simtradelab/
          echo "Type checking (optional)"

  build-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Check build artifacts
        run: |
          ls -la dist/
          echo "Built packages:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"

      - name: Test package installation
        shell: bash
        run: |
          # 在新的虚拟环境中测试安装
          python -m venv test_env
          WHEEL_FILE=$(find dist -name "simtradelab-*.whl" | head -1)
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source test_env/Scripts/activate
            python -m pip install "$WHEEL_FILE"
          else
            source test_env/bin/activate
            python -m pip install "$WHEEL_FILE"
          fi
          python -c "import simtradelab; print(f'✅ Package installation test passed: {simtradelab.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7
