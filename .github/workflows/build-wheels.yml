name: Build and Test Wheels

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install poetry

    - name: Build wheel with Poetry
      run: |
        poetry build

    - name: Test wheel installation
      shell: bash
      run: |
        # 找到wheel文件并安装
        WHEEL_FILE=$(find dist -name "simtradelab-*.whl" | head -1)
        python -m pip install "$WHEEL_FILE"
        python -c "import simtradelab; print('Poetry wheel installation successful')"

    - name: Clean up Poetry installation
      run: |
        pip uninstall -y simtradelab

    - name: Build wheel with setuptools (fallback)
      run: |
        python -m build --wheel

    - name: Test setuptools wheel installation
      shell: bash
      run: |
        WHEEL_FILE=$(find dist -name "simtradelab-*.whl" | head -1)
        python -m pip install "$WHEEL_FILE" --force-reinstall
        python -c "import simtradelab; print('Setuptools wheel installation successful')"

    - name: Test basic functionality
      run: |
        python -c "
        import simtradelab
        from simtradelab import BacktestEngine, Context
        print('Basic imports successful')
        print(f'Version: {simtradelab.__version__}')
        "

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.12']

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/

    - name: Test pip install from wheel
      shell: bash
      run: |
        WHEEL_FILE=$(find dist -name "simtradelab-*.whl" | head -1)
        python -m pip install "$WHEEL_FILE"
        python -c "
        import simtradelab
        print('Wheel installation test passed')
        print(f'Installed version: {simtradelab.__version__}')
        "

    - name: Test optional dependencies
      shell: bash
      run: |
        WHEEL_FILE=$(find dist -name "simtradelab-*.whl" | head -1)
        python -m pip install "${WHEEL_FILE}[data]"
        python -c "
        try:
            import akshare
            print('AkShare optional dependency installed')
        except ImportError:
            print('AkShare not available (expected on some platforms)')
        "

  publish:
    if: github.event_name == 'release'
    needs: [build, test-install]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine
        pip install poetry

    - name: Build distribution
      run: |
        poetry build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
